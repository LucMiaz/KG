stdtrue<-sqrt(var(subset(tf,tf$disc==1&!is.nan(tf$BPR))$BPR))
curvetrue<-curve(dnorm(x, mean=mtrue, sd=stdtrue),
col="#008837", lwd=2, add=TRUE, yaxt="n")
bartrue<-hist(subset(tf,tf$disc==1)$BPR, density=200, breaks=50, prob=TRUE, col='#a6dba0', main=unique(tf$author), xlab='BPR')
mtrue<-mean(subset(tf,tf$disc==1&!is.nan(tf$BPR))$BPR)
stdtrue<-sqrt(var(subset(tf,tf$disc==1&!is.nan(tf$BPR))$BPR))
curvetrue<-curve(dnorm(x, mean=mtrue, sd=stdtrue),
col="#008837", lwd=2, add=TRUE, yaxt="n")
bartrue<-hist(subset(tf,tf$disc==0)$BPR, density=200, breaks=50, prob=TRUE,
ylim=c(0, 4), col='#c2a5cf', xlim=c(-2,4),main=unique(tf$author), xlab='BPR')
#barfalse<-ggplot() + aes(tf$False)+ geom_histogram(binwidth=0.05, fill="#c2a5cf", add=TRUE)
barfalse<-hist(subset(tf,tf$disc==0)$BPR, density=200, breaks=50, prob=TRUE, col='#c2a5cf', xlim=c(-2,4),main=unique(tf$author), xlab='BPR')
#barfalse<-ggplot() + aes(tf$False)+ geom_histogram(binwidth=0.05, fill="#c2a5cf", add=TRUE)
mfalse<-mean(subset(tf,tf$disc==0 & !is.nan(tf$BPR))$BPR)
stdfalse<-sqrt(var(subset(tf,tf$disc==0 & !is.nan(tf$BPR))$BPR))
curvefalse<-curve(dnorm(x, mean=mfalse, sd=stdfalse),
col="#7b3294", lwd=2, add=TRUE, yaxt="n")
curvefalse<-curve(dnorm(x, mean=mfalse, sd=stdfalse),
col="#7b3294", lwd=2, xlim=c(-2,4), main=authors, xlab="BPR", ylab="Normalized number of items")
curvetrue<-curve(dnorm(x, mean=mtrue, sd=stdtrue),
col="#008837", lwd=2, add=TRUE, yaxt="n")
legend(2.5,0.75, # places a legend at the appropriate place
c('False','True'), # puts text in the legend
lty=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(2.5,2.5),col=c('#7b3294','#008837')) # gives the legend lines the correct color and width
col="#7b3294", lwd=2, main=authors, xlab="BPR", ylab="Normalized number of items")
curvetrue<-curve(dnorm(x, mean=mtrue, sd=stdtrue),
col="#008837", lwd=2, add=TRUE, yaxt="n")
legend(2.5,0.75, # places a legend at the appropriate place
c('False','True'), # puts text in the legend
lty=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(2.5,2.5),col=c('#7b3294','#008837')) # gives the legend lines the correct color and width
curvefalse<-curve(dnorm(x, mean=mfalse, sd=stdfalse),
col="#7b3294", lwd=2, main=authors, xlab="BPR", ylab="Normalized number of items")
curvetrue<-curve(dnorm(x, mean=mtrue, sd=stdtrue),
col="#008837", lwd=2, add=TRUE, yaxt="n")
legend(2.5,0.75, # places a legend at the appropriate place
c('False','True'), # puts text in the legend
lty=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(2.5,2.5),col=c('#7b3294','#008837')) # gives the legend lines the correct color and width
col="#7b3294", xlim=c(0,10),lwd=2, main=authors, xlab="BPR", ylab="Normalized number of items")
curvetrue<-curve(dnorm(x, mean=mtrue, sd=stdtrue),
col="#008837", lwd=2, add=TRUE, yaxt="n")
legend(2.5,0.75, # places a legend at the appropriate place
c('False','True'), # puts text in the legend
lty=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(2.5,2.5),col=c('#7b3294','#008837')) # gives the legend lines the correct color and width
tf
unique(tf$author)
authors=str(unique(tf$author))
authors=merge(unique(tf$author))
authors=join(unique(tf$author))
authors=paste(unique(tf$author))
authors
authors=paste(unique(tf$author), sep=" ")
authors
authors=paste(unique(tf$author), sep=", ")
bartrue<-hist(subset(tf,tf$disc==1)$BPR, density=200, breaks=50, prob=TRUE, col='#a6dba0', main=unique(tf$author), xlab='BPR')
mtrue<-mean(subset(tf,tf$disc==1&!is.nan(tf$BPR))$BPR)
stdtrue<-sqrt(var(subset(tf,tf$disc==1&!is.nan(tf$BPR))$BPR))
curvetrue<-curve(dnorm(x, mean=mtrue, sd=stdtrue),
col="#008837", lwd=2, add=TRUE, yaxt="n")
barfalse<-hist(subset(tf,tf$disc==0)$BPR, density=200, breaks=50, prob=TRUE, col='#c2a5cf', xlim=c(-2,4),main=unique(tf$author), xlab='BPR')
#barfalse<-ggplot() + aes(tf$False)+ geom_histogram(binwidth=0.05, fill="#c2a5cf", add=TRUE)
mfalse<-mean(subset(tf,tf$disc==0 & !is.nan(tf$BPR))$BPR)
stdfalse<-sqrt(var(subset(tf,tf$disc==0 & !is.nan(tf$BPR))$BPR))
curvefalse<-curve(dnorm(x, mean=mfalse, sd=stdfalse),
col="#7b3294", lwd=2, add=TRUE, yaxt="n")
curvefalse<-curve(dnorm(x, mean=mfalse, sd=stdfalse),
col="#7b3294", xlim=c(0,10),lwd=2, main=authors, xlab="BPR", ylab="Normalized number of items")
curvetrue<-curve(dnorm(x, mean=mtrue, sd=stdtrue),
col="#008837", lwd=2, add=TRUE, yaxt="n")
legend(2.5,0.75, # places a legend at the appropriate place
c('False','True'), # puts text in the legend
lty=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(2.5,2.5),col=c('#7b3294','#008837')) # gives the legend lines the correct color and width
#hist(tf$True, density=20, breaks=20, prob=TRUE,
#      ylim=c(0, 10), add=TRUE, col='#c2a5cf')
#curve(dnorm(x, mean=m, sd=std),
#      col="#7b3294", lwd=2, add=TRUE, yaxt="n")
legend(2.5,0.75, # places a legend at the appropriate place
c('False','True'), # puts text in the legend
lty=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(0.01,0.01),col=c('#7b3294','#008837')) # gives the legend lines the correct color and width
curvefalse<-curve(dnorm(x, mean=mfalse, sd=stdfalse),
col="#7b3294", xlim=c(0,10),lwd=2, main=authors, xlab="BPR", ylab="Normalized number of items")
curvetrue<-curve(dnorm(x, mean=mtrue, sd=stdtrue),
col="#008837", lwd=2, add=TRUE, yaxt="n")
legend(2.5,0.75, # places a legend at the appropriate place
c('False','True'), # puts text in the legend
lty=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(0.01,0.01),col=c('#7b3294','#008837')) # gives the legend lines the correct color and width
legend(0.01,0.01, # places a legend at the appropriate place
c('False','True'), # puts text in the legend
lty=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(1,1),col=c('#7b3294','#008837')) # gives the legend lines the correct color and width
legend(0.01,0.03, # places a legend at the appropriate place
c('False','True'), # puts text in the legend
lty=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(1,1),col=c('#7b3294','#008837')) # gives the legend lines the correct color and width
curvefalse<-curve(dnorm(x, mean=mfalse, sd=stdfalse),
curvetrue<-curve(dnorm(x, mean=mtrue, sd=stdtrue),
col="#7b3294", xlim=c(0,10),lwd=2, main=authors, xlab="BPR", ylab="Normalized number of items")
col="#008837", lwd=2, add=TRUE, yaxt="n")
legend(0.01,0.03, # places a legend at the appropriate place
c('False','True'), # puts text in the legend
lty=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(1,1),col=c('#7b3294','#008837')) # gives the legend lines the correct color and width
#hist(tf$True, density=20, breaks=20, prob=TRUE,
curvefalse<-curve(dnorm(x, mean=mfalse, sd=stdfalse),
col="#7b3294", xlim=c(0,10),lwd=2, main=authors, xlab="BPR", ylab="Normalized number of items")
curvetrue<-curve(dnorm(x, mean=mtrue, sd=stdtrue),
col="#008837", lwd=2, add=TRUE, yaxt="n")
legend(0.01,0.03, # places a legend at the appropriate place
c('False','True'), # puts text in the legend
lty=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(1,1),col=c('#7b3294','#008837')) # gives the legend lines the correct color and width
curvefalse<-curve(dnorm(x, mean=mfalse, sd=stdfalse),
col="#7b3294", xlim=c(-3,15),lwd=2, main=authors, xlab="BPR", ylab="Normalized number of items")
curvetrue<-curve(dnorm(x, mean=mtrue, sd=stdtrue),
col="#008837", lwd=2, add=TRUE, yaxt="n")
col="#7b3294", xlim=c(-5,16),lwd=2, main=authors, xlab="BPR", ylab="Normalized number of items")
curvetrue<-curve(dnorm(x, mean=mtrue, sd=stdtrue),
col="#008837", lwd=2, add=TRUE, yaxt="n")
legend(0.01,0.03, # places a legend at the appropriate place
c('False','True'), # puts text in the legend
lty=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(1,1),col=c('#7b3294','#008837')) # gives the legend lines the correct color and width
curvefalse<-curve(dnorm(x, mean=mfalse, sd=stdfalse),
col="#7b3294", xlim=c(-6,16),lwd=2, main=authors, xlab="BPR", ylab="Normalized number of items")
curvetrue<-curve(dnorm(x, mean=mtrue, sd=stdtrue),
col="#008837", lwd=2, add=TRUE, yaxt="n")
legend(0.01,0.03, # places a legend at the appropriate place
c('False','True'), # puts text in the legend
lty=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(1,1),col=c('#7b3294','#008837')) # gives the legend lines the correct color and width
library(tidyr)
install.library(tidyr)
install.packages(tidyr)
install.package(tidyr)
install.packages("tidyr")
??separate
c<- [tf$BPR < threshold[[1]]]
c<- c([tf$BPR < threshold[[1]]])
c<- c(tf$BPR < threshold[[1]])
threshold<-seq(0,4,0.01)
c<- c(tf$BPR < threshold[[1]])
c
c<- tf$BPR < threshold)
c<- tf$BPR < threshold
?vector
xf <-vector(length=length(threshold))
xf<-vector(length=length(threshold))
for(i in length(threshold)){
xf[[i]]<- tf$BPR[tf$disc==0]<threshold
}
xf<-vector(length=length(threshold))
for(i in length(threshold)){
xf[[i]]<- tf$BPR[tf$disc==0]<threshold[[i]]
}
nf<- length(tf$BPR[tf$disc==0])
np<- length(tf$BPR[tf$disc==1])
xf<-vector(NA,length=length(threshold))
xf <- vector(t(xf),length=nf)
for(i in length(threshold)){
xf[[i]]<- tf$BPR[tf$disc==0]<threshold[[i]]
}
library(jsonlite)
library(ggplot2)
library(dplyr)
library(RColorBrewer)
json_file='C:/lucmiaz/Algorithm_Report/Datamaous.json'
tf<-fromJSON(json_file)
gtf<-group(tf,AlgProp)
gtf<-group_by(tf,AlgProp)
summary(tf)
library(jsonlite)
library(ggplot2)
library(dplyr)
library(RColorBrewer)
json_file='C:/lucmiaz/Algorithm_Report/Datamaous.json'
tf<-fromJSON(json_file)
tf
tf$1
library(jsonlite)
library(ggplot2)
library(dplyr)
library(RColorBrewer)
json_file='C:/lucmiaz/Algorithm_Report/Datamaous.json'
tf<-fromJSON(json_file)
library(jsonlite)
library(ggplot2)
library(dplyr)
library(RColorBrewer)
json_file='C:/lucmiaz/Algorithm_Report/Datamaous.json'
tf<-fromJSON(json_file)
library(jsonlite)
library(ggplot2)
library(dplyr)
library(RColorBrewer)
json_file='C:/lucmiaz/Algorithm_Report/Datamaous.json'
tf<-fromJSON(json_file)
tf
View(tf)
json_file='C:/lucmiaz/Algorithm_Report/Datamaous.json'
tf<-fromJSON(json_file)
json_file='C:/lucmiaz/Algorithm_Report/Datamaousdict.json'
tfd<-fromJSON(json_file)
View(tfd)
remove(tfd)
remove(json_file)
max(tf$spec)
min(tf$spec)
mean(tf$spec)
??kmeans
library(stats)
kmeans(tf$spec)
kmeans(tf$spec, 10)
clusters<-kmeans(tf$spec, 10)
clusters$cluster
The databases in Neo4j are graphs, containing nodes and relationships between these nodes. Nodes and relationships have types (or labels). This will differentiate between Passings and Algorithms, in the case of Nodes, and between the relation of seeing (Passing saw this type of train) and the relation of taking place there (Passing took place here).
library(RNeo4j)#call RNeo4j package
install.packages('RNeo4j')
install.packages(pandoc)
install.packages('pandoc')
query='
MATCH (a:Algorithm)
MATCH (b)<-[s:ISANEVALOF]-(c)-[:WASEVALWITH]->(a)//the relationship s contains the specific lengths of time (masked and not) of the microphone signal (c)
MATCH (t)<-[r:SAW]-(b)//the relationship r contains info in the train of this Passing (lenght and track)
RETURN a.Name, c.tNoisemasked, c.tNoise, s.tEval, s.tEvalmasked, t.Name, r.trainLength, r.Track
'
q<-cypher(graph,query)#takes the info of each MicMes for one algorithm
library(RNeo4j)#call RNeo4j package
graph=startGraph('http://localhost:7474/db/data', username='neo4j', password='admin')#open a port to the db, with username 'neo4j' and password 'admin'
query='
MATCH (a:Algorithm)
MATCH (b)<-[s:ISANEVALOF]-(c)-[:WASEVALWITH]->(a)//the relationship s contains the specific lengths of time (masked and not) of the microphone signal (c)
MATCH (t)<-[r:SAW]-(b)//the relationship r contains info in the train of this Passing (lenght and track)
RETURN a.Name, c.tNoisemasked, c.tNoise, s.tEval, s.tEvalmasked, t.Name, r.trainLength, r.Track
'
q<-cypher(graph,query)#takes the info of each MicMes for one algorithm
View(q)
options.names
options
options
options.base
options$fig
options$get
??options
devtools::install_github('lucmiaz/knitr', build_vignettes = TRUE)
install.packages(devtools)
install.packages('devtools')
devtools::install_github('lucmiaz/knitr', build_vignettes = TRUE)
install.packages('knitr')
install.packages("knitr")
install.packages("stringi")
a<-20
if (a){print(TRUE)}
if (a){print(TRUE)}else{print(FALSE)}
dummyf<- function(a){if (a){print(TRUE)}else{print(FALSE)}}
dummyf(a)
dummyf()
dummyf(b)
dummyf(options)
a=data.frame('d'=3)
a
dummyf(a)
dummyf(a$d)
dummyf(a$e)
a.empty()
a$d.empty()
is.null(a)
is.null(a$d)
is.null(a$e)
if (!is.null(options$source.cap)){
if (!is.null(options$source.lp)){
x=paste('\\begin{lstlisting}[style=Rstyle, caption=', options$source.cap,',label=',options$source.lp,']\n', x, '\\end{lstlisting}\n',sep="")
}else{
x=paste('\\begin{lstlisting}[style=Rstyle, caption=', options$source.cap,']\n', x, '\\end{lstlisting}\n',sep="")}
}else{
x=paste('\\begin{lstlisting}[style=Rstyle]\n', x, '\\end{lstlisting}\n',sep="")}
if (options$split) {
name = fig_path('.tex', options, NULL)
if (!file.exists(dirname(name)))
dir.create(dirname(name))
cat(x, file = name)
sprintf('\\input{%s}', name)
} else x
options
summary(options)
output_asis(x,options)
x='3k4'
x=='3k4'
package.install('kable')
packages.install('kable')
install.packages('kable')
install.packages('plyr')
install.packages('xtable')
library(ggplot2)
library(dplyr)
library(tidyr)
library(RColorBrewer)
library(extrafont)
library(xtable)
loadfonts()
setwd("C:/LucMiaz/KG_dev_branch/KG/R_Analysis/Algorithm_analysis")#were our data was stored
theme_bw<-theme_update(text=element_text(size=14, family="Helvetica Neue"), axis.text=element_text(family="Helvetica Neue"),legend.background=element_rect(fill="#f5f5f5"))
theme_set(theme_bw())
#move to path where Datamaous.csv is stored
csv_file="Datamaous.csv"
tf<-read.csv(csv_file)
source('R/find_best.R')#load the functions inside find_best.R
View(dummyf)
best<-mutate(best, algorithm=paste(alg,algprop,sep="_"))
best<-find_best(tf, qualities=c(3,2))
best<-mutate(best, algorithm=paste(alg,algprop,sep="_"))
tablebest<select(best, one_of(c('TPR','FPR','totP','totF','thd','dist_ax','algorithm','delta','dif')))
tablebest<-select(best, one_of(c('TPR','FPR','totP','totF','thd','dist_ax','algorithm','delta','dif')))
View(tablebest)
tab <- xtable(best, digits=c(3,3,0,0,3,3,0,2,3),caption='Best thresholds for the fifteen algorithms obtained while considering all the authors together')
tab <- xtable(tablebest, digits=c(3,3,0,0,3,3,0,2,3),caption='Best thresholds for the fifteen algorithms obtained while considering all the authors together')
tab <- xtable(tablebest, digits=c(3,3,0,0,3,3,0,2,3,0),caption='Best thresholds for the fifteen algorithms obtained while considering all the authors together')
print(tab, type="latex")
tab <- xtable(tablebest, digits=c(0,3,3,0,0,3,3,0,2,3),caption='Best thresholds for the fifteen algorithms obtained while considering all the authors together')
print(tab, type="latex")
tablebest<-select(best, one_of(c('TPR','FPR','totP','totF','thd','dist_ax','algorithm','dif')))
tab <- xtable(tablebest, digits=c(0,3,3,0,0,3,3,0,2),caption='Best thresholds for the fifteen algorithms obtained while considering all the authors together')
print(tab, type="latex")
rocplot <- ggplot(tablebest, aes(tablebest$FPR,tablebest$TPR,color=tablebest$algorithm, title="Algorithms - all authors"))+  geom_segment(aes(x =0, y = 0, xend = 1, yend = 1), colour="#a5a5a5")+
scale_colour_manual(values=rep(brewer.pal(12,"Paired"),times=2),name="Algorithms")+
scale_shape_manual(values=rep(c(15,16,3,17,18,19),each=5),name="Algorithms")+
geom_point(aes(shape=tablebest$algorithm,label=tablebest$algorithm),size=2)+
xlab("False Positive Rate") + ylab("True Positive Rate")+
labs("ROC")
ggsave('figures/ROC.pdf', plot=rocplot, width=8, height=6)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
a<- range(1,length(tf),2)
a
length(tf)
a<- range(1,length(tf),step=2)
a<- seq(1,length(tf),2)
a<- seq(2,length(tf),2)
a
a<- seq(2,rnum(tf),2)
a<- seq(2,nrow(tf),2)
require(tidyr)
best<-mutate(best, algorithm=paste(alg,algprop,sep="_"))
tablebest<-select(best, one_of(c('TPR','FPR','totP','totF','thd','dist_ax','algorithm','dif')))
tab <- xtable(tablebest, digits=c(0,3,3,0,0,3,3,0,2),caption='Best thresholds for the fifteen algorithms obtained while considering all the authors together')
rnw<-seq(2,nrow(tablebest),2)
print(tab,booktabs = TRUE, type="latex",add.to.row(pos=rnw,command= c("\\rowcolor{gris}", "\\rowcolor{gris}")), add.to.row(pos=0,command="\\rowcolor{darkgrey}"))
best<-find_best(tf, qualities=c(3,2))
library(ggplot2)
library(dplyr)
library(tidyr)
library(RColorBrewer)
library(extrafont)
library(xtable)
loadfonts()
setwd("C:/LucMiaz/KG_dev_branch/KG/R_Analysis/Algorithm_analysis")#were our data was stored
theme_bw<-theme_update(text=element_text(size=14, family="Helvetica Neue"), axis.text=element_text(family="Helvetica Neue"),legend.background=element_rect(fill="#f5f5f5"))
theme_set(theme_bw())
csv_file="Datamaous.csv"
tf<-read.csv(csv_file)
source('R/find_best.R')#load the functions inside find_best.R
best<-find_best(tf, qualities=c(3,2))
require(tidyr)
best<-mutate(best, algorithm=paste(alg,algprop,sep="_"))
tablebest<-select(best, one_of(c('TPR','FPR','totP','totF','thd','dist_ax','algorithm','dif')))
tab <- xtable(tablebest, digits=c(0,3,3,0,0,3,3,0,2),caption='Best thresholds for the fifteen algorithms obtained while considering all the authors together')
rnw<-seq(2,nrow(tablebest),2)
print(tab,booktabs = TRUE, type="latex",add.to.row(pos=rnw,command= c("\\rowcolor{gris}", "\\rowcolor{gris}")), add.to.row(pos=0,command="\\rowcolor{darkgrey}"))
install.packages('Cairo')
install.packages('CairoPDF')
install.packages('Cairo_PDF')
install.packages('cairo_pdf')
library(Cairo)
require(tidyr)
bestfull<-find_best(tf, qualities=c(3,2))
best<-mutate(bestfull, algorithm=paste(alg,algprop,sep="_"))
best<-select(best, one_of(c('TPR','FPR','totP','totF','thd','dist_ax','algorithm','dif')))
bestPHFfull <-find_best(tf, authors=c('PHF'),qualities=c(2,3))
Q
c
Q
Q
walloffame<- rbind(cbind(best, author='all'), cbind(bestesr,author='esr'),cbind(bestluc,author='luc'),cbind(bestPhC,author='PhC'),cbind(bestPHF,author='PHF'))
walloffamest<-filter(walloffame, walloffame$dist_ax>0.45 | (walloffame$author=='all' & walloffame$dist_ax>0.35))
compressed<-walloffamest %>% group_by(algorithm) %>% summarise( avgthres=mean(thd)) %>% arrange(avgthres)
tab <- xtable(compressed, digits=c(2),caption='Best thresholds for the fifteen algorithms obtained while considering all the authors together')
print(tab,type="latex")
bestPHFfull <-find_best(tf, authors=c('PHF'),qualities=c(2,3))
bestPHF<-mutate(bestPHFfull, algorithm=paste(alg,algprop,sep="_"))
bestPHF<-select(bestPHF, one_of(c('TPR','FPR','totP','totF','thd','dist_ax','algorithm','dif')))
bestlucfull <-find_best(tf, authors=c('luc'),qualities=c(2,3))
bestluc<-mutate(bestlucfull, algorithm=paste(alg,algprop,sep="_"))
bestluc<-select(bestluc, one_of(c('TPR','FPR','totP','totF','thd','dist_ax','algorithm','dif')))
bestesrfull <-find_best(tf, authors=c('esr'),qualities=c(2,3))
bestesr<-mutate(bestesrfull, algorithm=paste(alg,algprop,sep="_"))
bestesr<-select(best, one_of(c('TPR','FPR','totP','totF','thd','dist_ax','algorithm','dif')))
bestPhCfull <-find_best(tf, authors=c('PhC'),qualities=c(2,3))
bestPhC<-mutate(bestPhCfull, algorithm=paste(alg,algprop,sep="_"))
bestPhC<-select(bestPhC, one_of(c('TPR','FPR','totP','totF','thd','dist_ax','algorithm','dif')))
walloffame<- rbind(cbind(best, author='all'), cbind(bestesr,author='esr'),cbind(bestluc,author='luc'),cbind(bestPhC,author='PhC'),cbind(bestPHF,author='PHF'))#group the best algorithms from all authors
walloffamest<-filter(walloffame, walloffame$dist_ax>0.45 | (walloffame$author=='all' & walloffame$dist_ax>0.35))#select a subset of walloffame with best thresholds
compressed<-walloffamest %>% group_by(algorithm) %>% summarise( avgthres=mean(thd)) %>% arrange(avgthres)#summarise walloffamest by taking the mean threshold for every duplicate algorithm (if such duplicate exists)
tabcomp <- xtable(compressed, digits=c(2),caption='Best thresholds for the fifteen algorithms obtained while considering all the authors together')
print(tabcomp,type="latex")
View(tablebest)
View(tabcomp)
View(compressed)
View(walloffamest)
View(walloffame)
walloffame<- rbind(cbind(best, author='all'), cbind(bestesr,author='esr'),cbind(bestluc,author='luc'),cbind(bestPhC,author='PhC'),cbind(bestPHF,author='PHF'))#group the best algorithms from all authors
walloffamest<-filter(walloffame, walloffame$dist_ax>0.45 | (walloffame$author=='all' & walloffame$dist_ax>0.35))#select a subset of walloffame with best thresholds
compressed<-walloffamest %>% group_by(algorithm) %>% summarise( avgthres=mean(thd)) %>% arrange(avgthres)#summarise walloffamest by taking the mean threshold for every duplicate algorithm (if such duplicate exists)
tabcomp <- xtable(compressed, digits=c(2),caption='Best thresholds for the fifteen algorithms obtained while considering all the authors together')
print(tabcomp,type="latex")
walloffamest<-filter(walloffame, walloffame$dist_ax>0.45 | (walloffame$author=='all' & walloffame$dist_ax>0.35))#select a subset of walloffame with best thresholds
View(walloffame)
0.823+0.11
0.5*(0.823+0.11)
((0.823-0.4665)**2+(0.4665-0.11)**2)**0.5
View(bestPHFfull)
View(bestPHF)
View(bestPHFfull)
setwd('C:/lucmiaz/kg_dev_branch/kg/R_Analysis/Algorithms-analysis-report')
setwd('C:/lucmiaz/kg_dev_branch/kg/R_Analysis/Algorithm-analysis')
setwd('C:\LucMiaz\KG_dev_branch\KG\R_Analysis\Algorithm_analysis')
setwd('C:\LucMiaz\KG_dev_branch\KG\R_Analysis\Algorithm_analysis')
setwd('C:/LucMiaz/KG_dev_branch/KG/R_Analysis/Algorithm_analysis')
Datamaous2<-read.csv('WallofFame/Datamaous_2.csv')
View(bestfull)
setwd("C:/LucMiaz/KG_dev_branch/KG/R_Analysis/Algorithm_analysis")#were our data was stored
csv_file="Datamaous.csv"
tf<-read.csv(csv_file)
source('R/find_best.R')#load the functions inside find_best.R
bestPHFfull <-find_best(tf, authors=c('PHF'),qualities=c(2,3))
bestPHF<-mutate(bestPHFfull, algorithm=paste(alg,algprop,sep="_"))
bestPHF<-select(bestPHF, one_of(c('TPR','FPR','totP','totF','thd','dist_ax','algorithm','dif')))
bestlucfull <-find_best(tf, authors=c('luc'),qualities=c(2,3))
bestluc<-mutate(bestlucfull, algorithm=paste(alg,algprop,sep="_"))
bestluc<-select(bestluc, one_of(c('TPR','FPR','totP','totF','thd','dist_ax','algorithm','dif')))
bestesrfull <-find_best(tf, authors=c('esr'),qualities=c(2,3))
bestesr<-mutate(bestesrfull, algorithm=paste(alg,algprop,sep="_"))
bestesr<-select(best, one_of(c('TPR','FPR','totP','totF','thd','dist_ax','algorithm','dif')))
bestPhCfull <-find_best(tf, authors=c('PhC'),qualities=c(2,3))
bestPhC<-mutate(bestPhCfull, algorithm=paste(alg,algprop,sep="_"))
bestPhC<-select(bestPhC, one_of(c('TPR','FPR','totP','totF','thd','dist_ax','algorithm','dif')))
setwd('C:/LucMiaz/KG_dev_branch/KG/R_Analysis/Algorithm_analysis')
Datamaous2<-read.csv('WallofFame/Datamaous_2.csv')
rocplotdatamaous <- ggplot(Datamaous2, aes(Datamaous2$FPR,Datamaous2$TPR,color=Datamaous2$X, title="Algorithms - datamaous"))+  geom_segment(aes(x =0, y = 0, xend = 1, yend = 1), colour="#a5a5a5")+
scale_colour_manual(values=rep(brewer.pal(12,"Paired"),times=2),name="Algorithms")+
scale_shape_manual(values=rep(c(15,16,3,17,18,19),each=4),name="Algorithms")+
geom_point(aes(shape=Datamaous2$X,label=Datamaous2$X),size=3)+
xlab("False Positive Rate") + ylab("True Positive Rate")+
labs("ROC")
rocplotdatamaous
submaous<-select(Datamaous2, dist_ax, esr_dist_ax, luc_dist_ax, PHF_dist_ax, PhC_dist_ax, X, X.1)
submaous<-mutate(submaous, tot_dist=(dist_ax+esr_dist_ax+luc_dist_ax+PHF_dist_ax+PhC_dist_ax)/5)
write.csv(submaous, 'WallofFame/datamaous_dist.csv')
tabsubmaous <- xtable(submaous, digits=c(2),caption='The results of the two algorithms.', label='tab:submaous')
print(tabsubmaous,type="latex")
submaous
View(submaous)
setwd('C:/LucMiaz/KG_dev_branch/KG/R_Analysis/Algorithm_analysis')
Datamaous2<-read.csv('WallofFame/Datamaous_2.csv')
rocplotdatamaous <- ggplot(Datamaous2, aes(Datamaous2$FPR,Datamaous2$TPR,color=Datamaous2$X, title="Algorithms - datamaous"))+  geom_segment(aes(x =0, y = 0, xend = 1, yend = 1), colour="#a5a5a5")+
scale_colour_manual(values=rep(brewer.pal(12,"Paired"),times=2),name="Algorithms")+
scale_shape_manual(values=rep(c(15,16,3,17,18,19),each=4),name="Algorithms")+
geom_point(aes(shape=Datamaous2$X,label=Datamaous2$X),size=3)+
xlab("False Positive Rate") + ylab("True Positive Rate")+
labs("ROC")
rocplotdatamaous
submaous<-select(Datamaous2, dist_ax, esr_dist_ax, luc_dist_ax, PHF_dist_ax, PhC_dist_ax, X, X.1)
submaous<-mutate(submaous, tot_dist=(dist_ax+esr_dist_ax+luc_dist_ax+PHF_dist_ax+PhC_dist_ax)/5)
write.csv(submaous, 'WallofFame/datamaous_dist.csv')
tabsubmaous <- xtable(submaous, digits=c(2),caption='The results of the two algorithms.', label='tab:submaous')
print(tabsubmaous,type="latex")
View(submaous)
View(Datamaous2)
Datamaous2<-mutate(Datamaous2, algorithm=paste(alg,algprop, sep='_'))
submaous<-select(Datamaous2, dist_ax, esr_dist_ax, luc_dist_ax, PHF_dist_ax, PhC_dist_ax, algorithm, thd)
submaous<-mutate(submaous, tot_dist=(dist_ax+esr_dist_ax+luc_dist_ax+PHF_dist_ax+PhC_dist_ax)/5)
write.csv(submaous, 'WallofFame/datamaous_dist.csv')
tabsubmaous <- xtable(submaous, digits=c(2),caption='The results of the two algorithms.', label='tab:submaous')
print(tabsubmaous,type="latex")
View(submaous)
setwd('C:/LucMiaz/KG_dev_branch/KG/R_Analysis/Algorithm_analysis')
Datamaous2<-read.csv('WallofFame/Datamaous_2.csv')
Datamaous2<-mutate(Datamaous2, algorithm=paste(alg,algprop, sep='_'))
rocplotdatamaous <- ggplot(Datamaous2, aes(Datamaous2$FPR,Datamaous2$TPR,color=Datamaous2$algorithm, title="Algorithms - datamaous"))+  geom_segment(aes(x =0, y = 0, xend = 1, yend = 1), colour="#a5a5a5")+
scale_colour_manual(values=rep(brewer.pal(12,"Paired"),times=2),name="Algorithms")+
scale_shape_manual(values=rep(c(15,16,3,17,18,19),each=4),name="Algorithms")+
geom_point(aes(shape=Datamaous2$algorithm,label=Datamaous2$algorithm),size=3)+
xlab("False Positive Rate") + ylab("True Positive Rate")+
labs("ROC")
rocplotdatamaous
submaous<-select(Datamaous2, dist_ax, esr_dist_ax, luc_dist_ax, PHF_dist_ax, PhC_dist_ax, algorithm, thd)
submaous<-mutate(submaous, dist_tot=(dist_ax+esr_dist_ax+luc_dist_ax+PHF_dist_ax+PhC_dist_ax)/5)
write.csv(submaous, 'WallofFame/datamaous_dist.csv')
tabsubmaous <- xtable(submaous, digits=c(2),caption='The results of the two algorithms.', label='tab:submaous')
print(tabsubmaous,type="latex")
View(submaous)
View(bestfull)
require(tidyr)
bestfull<-find_best(tf, qualities=c(3,2))
best<-mutate(bestfull, algorithm=paste(alg,algprop,sep="_"))
best<-select(best, one_of(c('TPR','FPR','totP','totF','thd','dist_ax','algorithm','dif')))
View(bestfull)
View(best)
