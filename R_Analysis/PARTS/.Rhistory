json_file='C:/lucmiaz/Algorithm_Report/Datamaous.json'
tf<-fromJSON(json_file)
tf
tf$1
library(jsonlite)
library(ggplot2)
library(dplyr)
library(RColorBrewer)
json_file='C:/lucmiaz/Algorithm_Report/Datamaous.json'
tf<-fromJSON(json_file)
library(jsonlite)
library(ggplot2)
library(dplyr)
library(RColorBrewer)
json_file='C:/lucmiaz/Algorithm_Report/Datamaous.json'
tf<-fromJSON(json_file)
library(jsonlite)
library(ggplot2)
library(dplyr)
library(RColorBrewer)
json_file='C:/lucmiaz/Algorithm_Report/Datamaous.json'
tf<-fromJSON(json_file)
tf
View(tf)
json_file='C:/lucmiaz/Algorithm_Report/Datamaous.json'
tf<-fromJSON(json_file)
json_file='C:/lucmiaz/Algorithm_Report/Datamaousdict.json'
tfd<-fromJSON(json_file)
View(tfd)
remove(tfd)
remove(json_file)
max(tf$spec)
min(tf$spec)
mean(tf$spec)
??kmeans
library(stats)
kmeans(tf$spec)
kmeans(tf$spec, 10)
clusters<-kmeans(tf$spec, 10)
clusters$cluster
The databases in Neo4j are graphs, containing nodes and relationships between these nodes. Nodes and relationships have types (or labels). This will differentiate between Passings and Algorithms, in the case of Nodes, and between the relation of seeing (Passing saw this type of train) and the relation of taking place there (Passing took place here).
library(RNeo4j)#call RNeo4j package
install.packages('RNeo4j')
install.packages(pandoc)
install.packages('pandoc')
query='
MATCH (a:Algorithm)
MATCH (b)<-[s:ISANEVALOF]-(c)-[:WASEVALWITH]->(a)//the relationship s contains the specific lengths of time (masked and not) of the microphone signal (c)
MATCH (t)<-[r:SAW]-(b)//the relationship r contains info in the train of this Passing (lenght and track)
RETURN a.Name, c.tNoisemasked, c.tNoise, s.tEval, s.tEvalmasked, t.Name, r.trainLength, r.Track
'
q<-cypher(graph,query)#takes the info of each MicMes for one algorithm
library(RNeo4j)#call RNeo4j package
graph=startGraph('http://localhost:7474/db/data', username='neo4j', password='admin')#open a port to the db, with username 'neo4j' and password 'admin'
query='
MATCH (a:Algorithm)
MATCH (b)<-[s:ISANEVALOF]-(c)-[:WASEVALWITH]->(a)//the relationship s contains the specific lengths of time (masked and not) of the microphone signal (c)
MATCH (t)<-[r:SAW]-(b)//the relationship r contains info in the train of this Passing (lenght and track)
RETURN a.Name, c.tNoisemasked, c.tNoise, s.tEval, s.tEvalmasked, t.Name, r.trainLength, r.Track
'
q<-cypher(graph,query)#takes the info of each MicMes for one algorithm
View(q)
options.names
options
options
options.base
options$fig
options$get
??options
devtools::install_github('lucmiaz/knitr', build_vignettes = TRUE)
install.packages(devtools)
install.packages('devtools')
devtools::install_github('lucmiaz/knitr', build_vignettes = TRUE)
install.packages('knitr')
install.packages("knitr")
install.packages("stringi")
a<-20
if (a){print(TRUE)}
if (a){print(TRUE)}else{print(FALSE)}
dummyf<- function(a){if (a){print(TRUE)}else{print(FALSE)}}
dummyf(a)
dummyf()
dummyf(b)
dummyf(options)
a=data.frame('d'=3)
a
dummyf(a)
dummyf(a$d)
dummyf(a$e)
a.empty()
a$d.empty()
is.null(a)
is.null(a$d)
is.null(a$e)
if (!is.null(options$source.cap)){
if (!is.null(options$source.lp)){
x=paste('\\begin{lstlisting}[style=Rstyle, caption=', options$source.cap,',label=',options$source.lp,']\n', x, '\\end{lstlisting}\n',sep="")
}else{
x=paste('\\begin{lstlisting}[style=Rstyle, caption=', options$source.cap,']\n', x, '\\end{lstlisting}\n',sep="")}
}else{
x=paste('\\begin{lstlisting}[style=Rstyle]\n', x, '\\end{lstlisting}\n',sep="")}
if (options$split) {
name = fig_path('.tex', options, NULL)
if (!file.exists(dirname(name)))
dir.create(dirname(name))
cat(x, file = name)
sprintf('\\input{%s}', name)
} else x
options
summary(options)
output_asis(x,options)
x='3k4'
x=='3k4'
forplot<-read.csv('../Algorithm_analysis/WallofFame/forplot.csv',sep=';')#contains the same info as Datamaous2, but in an other format
barplot<-ggplot(filter(forplot,author!='all'), aes(x=algprop)) + geom_bar(aes(weight=dist_ax, fill=author))+
coord_flip()+
scale_fill_brewer(type='qual',palette=8)#colorscale
barplot
library(ggplot2)
forplot<-read.csv('../Algorithm_analysis/WallofFame/forplot.csv',sep=';')#contains the same info as Datamaous2, but in an other format
barplot<-ggplot(filter(forplot,author!='all'), aes(x=algprop)) + geom_bar(aes(weight=dist_ax, fill=author))+
coord_flip()+
scale_fill_brewer(type='qual',palette=8)#colorscale
barplot
forplot<-read.csv('../Algorithm_analysis/WallofFame/forplot.csv',sep=';')#contains the same info as Datamaous2, but in an other format
setwd('C:/lucmiaz/kg_dev_branch/kg/R_analysis/PARTS')
forplot<-read.csv('../Algorithm_analysis/WallofFame/forplot.csv',sep=';')#contains the same info as Datamaous2, but in an other format
barplot<-ggplot(filter(forplot,author!='all'), aes(x=algprop)) + geom_bar(aes(weight=dist_ax, fill=author))+
coord_flip()+
scale_fill_brewer(type='qual',palette=8)#colorscale
barplot
View(forplot)
forplot<-read.csv('../Algorithm_analysis/WallofFame/forplot.csv',sep=';')#contains the same info as Datamaous2, but in an other format
barplot<-ggplot(filter(forplot,forplot$author!='all'), aes(x=algprop)) + geom_bar(aes(weight=dist_ax, fill=author))+
coord_flip()+
scale_fill_brewer(type='qual',palette=8)#colorscale
barplot
forplot$author
forplot$author!='all'
forplot<-read.csv('../Algorithm_analysis/WallofFame/forplot.csv',sep=';')#contains the same info as Datamaous2, but in an other format
barplot<-ggplot(filter(forplot,forplot$author!='all'), aes(x=algprop)) + geom_bar(aes(weight=dist_ax, fill=author))+
coord_flip()+
scale_fill_brewer(type='qual',palette=8)#colorscale
barplot<-ggplot(filter(forplot,forplot$author!='all'), aes(x=algprop)) + geom_bar()+
coord_flip()+
scale_fill_brewer(type='qual',palette=8)#colorscale
barplot<-ggplot(filter(forplot,author!='all'), aes(x=algprop)) + geom_bar(aes(weight=dist_ax, fill=author))+
coord_flip()+
scale_fill_brewer(type='qual',palette=8)#colorscale
barplot<- forplot %>% select(author!='all') %>% ggplot(aes(x=algprop))
library(dplyr)
barplot<- forplot %>% select(author!='all') %>% ggplot(aes(x=algprop))
barplot<- forplot %>% filter(author!='all') %>% ggplot(aes(x=algprop))
barplot <- barplot + geom_bar(aes(weight=dist_ax, fill=author))+
coord_flip()+
scale_fill_brewer(type='qual',palette=8)#colorscale
barplot
forplot<-read.csv('../Algorithm_analysis/WallofFame/forplot.csv',sep=';')#contains the same info as Datamaous2, but in an other format
barplot<- forplot %>% filter(author!='all') %>% ggplot(aes(x=algprop))
barplot <- barplot + geom_bar(aes(weight=dist_ax/4, fill=author))+
coord_flip()+
xlab('Average efficiency')+
ylab('Algorithm')+
scale_fill_brewer(type='qual',palette=8)#colorscale
barplot
forplot<-read.csv('../Algorithm_analysis/WallofFame/forplot.csv',sep=';')#contains the same info as Datamaous2, but in an other format
barplot<- forplot %>% filter(author!='all') %>% ggplot(aes(x=algprop))
barplot <- barplot + geom_bar(aes(weight=dist_ax/length(unique(author)), fill=author))+
coord_flip()+
xlab('Average efficiency')+
ylab('Algorithm')+
scale_fill_brewer(type='qual',palette=8)#colorscale
barplot
library(RNeo4j)#call RNeo4j package
graph=startGraph('http://localhost:7474/db/data', username='neo4j', password='admin')#opens a port to the db, with username 'neo4j' and password 'admin'
#to access the database click this link : 'http://neo4j:admin@localhost:7474/db/data'
library(RColorBrewer)
qfilt<- q %>% filter(b.Measurement=='Vormessung')
ggplot(qfilt, aes(t.Name,abs(c.tNoise/s.tEval), fill=a.Name, lw=0))+geom_boxplot(stat = "ydensity", position = "dodge", trim = TRUE,
scale = "width", alpha=0.4,colour='#272822', weight=0.25,linetype=1, size=0.25)+
xlab('Train Type')+
ylab('Ratio $\frac{Noise}{Total}$')+
#title('Comparison of Noise length ratio for pre-measurements')+
coord_flip()+#rotates the graphic
scale_fill_manual(values=c("#66a61e", "#e6ab02"),name="Algorithms")+
theme(legend.position="bottom")
library(RNeo4j)#call RNeo4j package
graph=startGraph('http://localhost:7474/db/data', username='neo4j', password='admin')#opens a port to the db, with username 'neo4j' and password 'admin'
#to access the database click this link : 'http://neo4j:admin@localhost:7474/db/data'
query='
MATCH (a:Algorithm)
MATCH (b)<-[s:ISANEVALOF]-(c)-[:WASEVALWITH]->(a)//the relationship s contains the specific lengths of time (masked and not) of the microphone signal (c)
MATCH (t)<-[r:SAW]-(b)//the relationship r contains info on the train (t) of this Passing (b) (lenght and track)
RETURN a.Name, b.Name, b.Measurement, c.tNoisemasked, c.tNoise, s.tEval, s.tEvalmasked, t.Name, r.trainLength, r.Track
'
q<-cypher(graph,query)#takes the info of each MicMes for one algorithm
library(RColorBrewer)
qfilt<- q %>% filter(b.Measurement=='Vormessung')
ggplot(qfilt, aes(t.Name,abs(c.tNoise/s.tEval), fill=a.Name, lw=0))+geom_boxplot(stat = "ydensity", position = "dodge", trim = TRUE,
scale = "width", alpha=0.4,colour='#272822', weight=0.25,linetype=1, size=0.25)+
xlab('Train Type')+
ylab('Ratio $\frac{Noise}{Total}$')+
#title('Comparison of Noise length ratio for pre-measurements')+
coord_flip()+#rotates the graphic
scale_fill_manual(values=c("#66a61e", "#e6ab02"),name="Algorithms")+
theme(legend.position="bottom")
library(RNeo4j)#call RNeo4j package
graph=startGraph('http://localhost:7474/db/data', username='neo4j', password='admin')#opens a port to the db, with username 'neo4j' and password 'admin'
#to access the database click this link : 'http://neo4j:admin@localhost:7474/db/data'
query='
MATCH (a:Algorithm)
MATCH (b)<-[s:ISANEVALOF]-(c)-[:WASEVALWITH]->(a)//the relationship s contains the specific lengths of time (masked and not) of the microphone signal (c)
MATCH (t)<-[r:SAW]-(b)//the relationship r contains info on the train (t) of this Passing (b) (lenght and track)
RETURN a.Name, b.Name, b.Measurement, c.tNoisemasked, c.tNoise, s.tEval, s.tEvalmasked, t.Name, r.trainLength, r.Track
'
q<-cypher(graph,query)#takes the info of each MicMes for one algorithm
library(RColorBrewer)
qfilt<- q %>% filter(b.Measurement=='Vormessung')
ggplot(qfilt, aes(t.Name,abs(c.tNoise/(1+abs(s.tEval))), fill=a.Name, lw=0))+geom_boxplot(stat = "ydensity", position = "dodge", trim = TRUE,
scale = "width", alpha=0.4,colour='#272822', weight=0.25,linetype=1, size=0.25)+
xlab('Train Type')+
ylab('Ratio $\\frac{Noise}{Total}$')+
#title('Comparison of Noise length ratio for pre-measurements')+
coord_flip()+#rotates the graphic
scale_fill_manual(values=c("#66a61e", "#e6ab02"),name="Algorithms")+
theme(legend.position="bottom")
library(RColorBrewer)
qfilt<- q %>% filter(b.Measurement=='Vormessung')
ggplot(qfilt, aes(t.Name,abs(c.tNoise/(1+abs(s.tEval))), fill=a.Name, lw=0))+geom_violin(stat = "ydensity", position = "dodge", trim = TRUE,
scale = "width", alpha=0.4,colour='#272822', weight=0.25,linetype=1, size=0.25)+
xlab('Train Type')+
ylab('Ratio $\\frac{Noise}{Total}$')+
#title('Comparison of Noise length ratio for pre-measurements')+
coord_flip()+#rotates the graphic
scale_fill_manual(values=c("#66a61e", "#e6ab02"),name="Algorithms")+
theme(legend.position="bottom")
library(RColorBrewer)
qfilt<- q %>% filter(b.Measurement=='Vormessung')
ggplot(qfilt, aes(t.Name,abs(c.tNoise/(abs(s.tEval))), fill=a.Name, lw=0))+geom_violin(stat = "ydensity", position = "dodge", trim = TRUE,
scale = "width", alpha=0.4,colour='#272822', weight=0.25,linetype=1, size=0.25)+
xlab('Train Type')+
ylab('Ratio $\\frac{Noise}{Total}$')+
#title('Comparison of Noise length ratio for pre-measurements')+
coord_flip()+#rotates the graphic
scale_fill_manual(values=c("#66a61e", "#e6ab02"),name="Algorithms")+
theme(legend.position="bottom")
library(RColorBrewer)
qfilt<- q %>% filter(b.Measurement=='Vormessung')
ggplot(qfilt, aes(t.Name,abs(c.tNoise/(1+abs(s.tEval))), fill=a.Name, lw=0))+geom_violin(stat = "ydensity", position = "dodge", trim = TRUE,
scale = "width", alpha=0.4,colour='#272822', weight=0.25,linetype=1, size=0.25)+
xlab('Train Type')+
ylab('Ratio $\\frac{Noise}{Total}$')+
#title('Comparison of Noise length ratio for pre-measurements')+
coord_flip()+#rotates the graphic
scale_fill_manual(values=c("#66a61e", "#e6ab02"),name="Algorithms")+
theme(legend.position="bottom")
library(knitr)
opts_chunk$set(cache=TRUE, autodep=TRUE,fig.width=8, fig.height=6,fig.path='figures/theme-', cache.path='cache/theme-',out.width='\\textwidth', split=TRUE)
render_listings()
library(ggplot2)
library(dplyr)
library(tidyr)
library(RColorBrewer)
library(extrafont)
library(xtable)
loadfonts()
#theme_bw<-theme_update(text=element_text(size=14, family="Helvetica Neue"), axis.text=element_text(family="Helvetica Neue"),legend.background=element_rect(fill="#f5f5f5"))
#theme_set(theme_bw())
theme = theme_set(theme_minimal())
theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank(),text=element_text(size=14, family="Helvetica Neue"), axis.text=element_text(family="Helvetica Neue"),legend.background=element_rect(fill="#f5f5f5"))
library(RColorBrewer)
qfilt<- q %>% filter(b.Measurement=='Vormessung')
ggplot(qfilt, aes(t.Name,abs(c.tNoise/(1+abs(s.tEval))), fill=a.Name, lw=0))+geom_violin(stat = "ydensity", position = "dodge", trim = TRUE,
scale = "width", alpha=0.4,colour='#272822', weight=0.25,linetype=1, size=0.25)+
xlab('Train Type')+
ylab('Ratio $\\frac{Noise}{Total}$')+
#title('Comparison of Noise length ratio for pre-measurements')+
coord_flip()+#rotates the graphic
scale_fill_manual(values=c("#66a61e", "#e6ab02"),name="Algorithms")+
theme(legend.position="bottom")
library(knitr)
opts_chunk$set(cache=TRUE, autodep=TRUE,fig.width=8, fig.height=6,fig.path='figures/theme-', cache.path='cache/theme-',out.width='\\textwidth', split=TRUE)
render_listings()
library(ggplot2)
library(dplyr)
library(tidyr)
library(RColorBrewer)
library(extrafont)
library(xtable)
loadfonts()
#theme_bw<-theme_update(text=element_text(size=14, family="Helvetica Neue"), axis.text=element_text(family="Helvetica Neue"),legend.background=element_rect(fill="#f5f5f5"))
#theme_set(theme_bw())
theme = theme_set(theme_minimal())
theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank(), axis.text=element_text(family="Helvetica Neue"),legend.background=element_rect(fill="#f5f5f5"))
library(RColorBrewer)
qfilt<- q %>% filter(b.Measurement=='Vormessung')
ggplot(qfilt, aes(t.Name,abs(c.tNoise/(1+abs(s.tEval))), fill=a.Name, lw=0))+geom_violin(stat = "ydensity", position = "dodge", trim = TRUE,
scale = "width", alpha=0.4,colour='#272822', weight=0.25,linetype=1, size=0.25)+
xlab('Train Type')+
ylab('Ratio $\\frac{Noise}{Total}$')+
#title('Comparison of Noise length ratio for pre-measurements')+
coord_flip()+#rotates the graphic
scale_fill_manual(values=c("#66a61e", "#e6ab02"),name="Algorithms")+
theme(legend.position="bottom")
library(RColorBrewer)
qfilt<- q %>% filter(b.Measurement=='Vormessung')
ggplot(qfilt, aes(t.Name,abs(c.tNoise/(1+abs(s.tEval))), fill=a.Name, lw=0))+geom_boxplot(stat = "ydensity", position = "dodge", trim = TRUE,
scale = "width", alpha=0.4,colour='#272822', weight=0.25,linetype=1, size=0.25)+
xlab('Train Type')+
ylab('Ratio $\\frac{Noise}{Total}$')+
#title('Comparison of Noise length ratio for pre-measurements')+
coord_flip()+#rotates the graphic
scale_fill_manual(values=c("#66a61e", "#e6ab02"),name="Algorithms")+
theme(legend.position="bottom")
library(RColorBrewer)
qfilt<- q %>% filter(b.Measurement=='Vormessung')
ggplot(qfilt, aes(t.Name,abs(c.tNoise/(1+abs(s.tEval))), fill=a.Name, lw=0))+geom_boxplot(outlier.colour = NULL,aes_string(colour="#272822", fill="SampleClass"))+
xlab('Train Type')+
ylab('Ratio $\\frac{Noise}{Total}$')+
#title('Comparison of Noise length ratio for pre-measurements')+
coord_flip()+#rotates the graphic
scale_fill_manual(values=c("#66a61e", "#e6ab02"),name="Algorithms")+
theme(legend.position="bottom")
library(RColorBrewer)
qfilt<- q %>% filter(b.Measurement=='Vormessung')
ggplot(qfilt, aes(t.Name,abs(c.tNoise/(1+abs(s.tEval))), fill=a.Name, lw=0))+geom_boxplot(outlier.colour = NULL,aes_string(colour="#272822", fill="SampleClass"))+
xlab('Train Type')+
ylab('Ratio $\\frac{Noise}{Total}$')+
#title('Comparison of Noise length ratio for pre-measurements')+
#coord_flip()+#rotates the graphic
scale_fill_manual(values=c("#66a61e", "#e6ab02"),name="Algorithms")+
theme(legend.position="bottom")
library(RColorBrewer)
qfilt<- q %>% filter(b.Measurement=='Vormessung')
ggplot(qfilt, aes(t.Name,abs(c.tNoise/(1+abs(s.tEval))), fill=a.Name, lw=0))+geom_boxplot(outlier.colour = NULL,aes_string(colour="#272822"))+
xlab('Train Type')+
ylab('Ratio $\\frac{Noise}{Total}$')+
#title('Comparison of Noise length ratio for pre-measurements')+
coord_flip()+#rotates the graphic
scale_fill_manual(values=c("#66a61e", "#e6ab02"),name="Algorithms")+
theme(legend.position="bottom")
library(RColorBrewer)
qfilt<- q %>% filter(b.Measurement=='Vormessung')
ggplot(qfilt, aes(t.Name,abs(c.tNoise/(1+abs(s.tEval))), fill=a.Name, lw=0))+geom_boxplot(outlier.colour = NULL)+
xlab('Train Type')+
ylab('Ratio $\\frac{Noise}{Total}$')+
#title('Comparison of Noise length ratio for pre-measurements')+
coord_flip()+#rotates the graphic
scale_fill_manual(values=c("#66a61e", "#e6ab02"),name="Algorithms")+
theme(legend.position="bottom")
library(RColorBrewer)
qfilt<- q %>% filter(b.Measurement=='Vormessung')
ggplot(qfilt, mapping=aes_string(y = t.Name, x = c.tNoise/(s.tEval)), fill=a.Name, lw=0)+geom_boxplot(outlier.colour = NULL, aes_string(colour=t.Name, fill=t.Name))+
xlab('Train Type')+
ylab('Ratio Noise-Total')+
#title('Comparison of Noise length ratio for pre-measurements')+
coord_flip()+#rotates the graphic
scale_fill_manual(values=c("#66a61e", "#e6ab02"),name="Algorithms")+
theme(legend.position="bottom")
qfilt$c.tNoise[1]
library(RColorBrewer)
qfilt<- q %>% filter(b.Measurement=='Vormessung')
ggplot(qfilt, mapping=aes(y = t.Name, x = c.tNoise/s.tEval), fill=a.Name, lw=0)+geom_boxplot(outlier.colour = NULL, aes(colour=t.Name, fill=t.Name))+
xlab('Train Type')+
ylab('Ratio Noise-Total')+
#title('Comparison of Noise length ratio for pre-measurements')+
coord_flip()+#rotates the graphic
scale_fill_manual(values=c("#66a61e", "#e6ab02"),name="Algorithms")+
theme(legend.position="bottom")
library(RColorBrewer)
qfilt<- q %>% filter(b.Measurement=='Vormessung')
ggplot(qfilt, mapping=aes_string(y = t.Name, x = c.tNoise/s.tEval), fill=a.Name, lw=0)+geom_boxplot(outlier.colour = NULL, aes_string(colour=t.Name, fill=t.Name))+
xlab('Train Type')+
ylab('Ratio Noise-Total')+
#title('Comparison of Noise length ratio for pre-measurements')+
coord_flip()+#rotates the graphic
scale_fill_manual(values=c("#66a61e", "#e6ab02"),name="Algorithms")+
theme(legend.position="bottom")
library(RColorBrewer)
qfilt<- q %>% filter(b.Measurement=='Vormessung')
ggplot(qfilt, mapping=aes(y = t.Name, x = c.tNoise/s.tEval), fill=a.Name, lw=0)+geom_boxplot(outlier.colour = NULL, aes(colour=t.Name, fill=t.Name))+
xlab('Train Type')+
ylab('Ratio Noise-Total')+
#title('Comparison of Noise length ratio for pre-measurements')+
coord_flip()+#rotates the graphic
scale_fill_manual(values=c("#66a61e", "#e6ab02"),name="Algorithms")+
theme(legend.position="bottom")
library(RColorBrewer)
qfilt<- q %>% filter(b.Measurement=='Vormessung')
ggplot(qfilt, mapping=aes(y = t.Name, x = c.tNoise/s.tEval), fill=a.Name, lw=0)+geom_boxplot(outlier.colour = NULL, aes(colour=t.Name, fill=t.Name))+
xlab('Train Type')+
ylab('Ratio Noise-Total')+
#title('Comparison of Noise length ratio for pre-measurements')+
coord_flip()+#rotates the graphic
scale_fill_manual(values=rep(c("#66a61e", "#e6ab02"),10),name="Algorithms")+
theme(legend.position="bottom")
library(RColorBrewer)
qfilt<- q %>% filter(b.Measurement=='Vormessung')
ggplot(qfilt, mapping=aes(x = t.Name, y = c.tNoise/s.tEval), lw=0)+geom_boxplot(outlier.colour = NULL, aes(colour=a.Name, fill=a.Name))+
xlab('Train Type')+
ylab('Ratio Noise-Total')+
#title('Comparison of Noise length ratio for pre-measurements')+
coord_flip()+#rotates the graphic
scale_fill_manual(values=rep(c("#66a61e", "#e6ab02"),10),name="Algorithms")+
theme(legend.position="bottom")
library(RColorBrewer)
qfilt<- q %>% filter(b.Measurement=='Vormessung')
ggplot(qfilt, mapping=aes(x = t.Name, y = c.tNoise/s.tEval), lw=0)+geom_boxplot(outlier.colour = NULL, aes(fill=a.Name))+
xlab('Train Type')+
ylab('Ratio Noise-Total')+
#title('Comparison of Noise length ratio for pre-measurements')+
coord_flip()+#rotates the graphic
scale_fill_manual(values=rep(c("#66a61e", "#e6ab02"),10),name="Algorithms")+
theme(legend.position="bottom")
library(RColorBrewer)
qfilt<- q %>% filter(b.Measurement=='Vormessung')
ggplot(qfilt, mapping=aes(x = t.Name, y = c.tNoise/s.tEval), lw=0)+geom_boxplot(outlier.colour = NULL, aes(color=NULL, fill=a.Name))+
xlab('Train Type')+
ylab('Ratio Noise-Total')+
#title('Comparison of Noise length ratio for pre-measurements')+
coord_flip()+#rotates the graphic
scale_fill_manual(values=rep(c("#66a61e", "#e6ab02"),10),name="Algorithms")+
theme(legend.position="bottom")
library(RColorBrewer)
qfilt<- q %>% filter(b.Measurement=='Vormessung')
ggplot(qfilt, mapping=aes(x = a.Name, y = c.tNoise/s.tEval), lw=0)+geom_boxplot(outlier.colour = NULL, aes(color=NULL, fill=a.Name))+
xlab('Train Type')+
ylab('Ratio Noise-Total')+
#title('Comparison of Noise length ratio for pre-measurements')+
coord_flip()+#rotates the graphic
facet_grid(facets = t.Name)+
scale_fill_manual(values=rep(c("#66a61e", "#e6ab02"),10),name="Algorithms")+
theme(legend.position="bottom")
library(RColorBrewer)
qfilt<- q %>% filter(b.Measurement=='Vormessung')
ggplot(qfilt, mapping=aes(x = a.Name, y = c.tNoise/s.tEval), lw=0)+geom_boxplot(outlier.colour = NULL, aes(color=NULL, fill=a.Name))+
xlab('Train Type')+
ylab('Ratio Noise-Total')+
#title('Comparison of Noise length ratio for pre-measurements')+
coord_flip()+#rotates the graphic
facet_grid(facets = qfilt$t.Name)+
scale_fill_manual(values=rep(c("#66a61e", "#e6ab02"),10),name="Algorithms")+
theme(legend.position="bottom")
library(RColorBrewer)
qfilt<- q %>% filter(b.Measurement=='Vormessung')
ggplot(qfilt, mapping=aes(x = a.Name, y = c.tNoise/s.tEval), lw=0)+geom_boxplot(outlier.colour = NULL, aes(color=NULL, fill=a.Name))+
xlab('Train Type')+
ylab('Ratio Noise-Total')+
#title('Comparison of Noise length ratio for pre-measurements')+
coord_flip()+#rotates the graphic
facet_grid(facets = ". ~ t.Name")+
scale_fill_manual(values=rep(c("#66a61e", "#e6ab02"),10),name="Algorithms")+
theme(legend.position="bottom")
library(RColorBrewer)
qfilt<- q %>% filter(b.Measurement=='Vormessung')
ggplot(qfilt, mapping=aes(x = a.Name, y = c.tNoise/s.tEval), lw=0)+geom_boxplot(outlier.colour = NULL, aes(color=NULL, fill=a.Name))+
xlab('Train Type')+
ylab('Ratio Noise-Total')+
#title('Comparison of Noise length ratio for pre-measurements')+
#coord_flip()+#rotates the graphic
facet_grid(facets = ". ~ t.Name")+
scale_fill_manual(values=rep(c("#66a61e", "#e6ab02"),10),name="Algorithms")+
theme(legend.position="bottom")
library(RColorBrewer)
qfilt<- q %>% filter(b.Measurement=='Vormessung')
ggplot(qfilt, mapping=aes(x = a.Name, y = c.tNoise/s.tEval), lw=0)+geom_boxplot(outlier.colour = NULL, aes(color=NULL, fill=a.Name))+
xlab('Train Type')+
ylab('Ratio Noise-Total')+
#title('Comparison of Noise length ratio for pre-measurements')+
#coord_flip()+#rotates the graphic
facet_grid(facets = "t.Name ~ .")+
scale_fill_manual(values=rep(c("#66a61e", "#e6ab02"),10),name="Algorithms")+
theme(legend.position="bottom")
library(RColorBrewer)
qfilt<- q %>% filter(b.Measurement=='Vormessung')
ggplot(qfilt, mapping=aes(x = a.Name, y = c.tNoise/s.tEval), lw=0)+geom_boxplot(outlier.colour = NULL, aes(color=NULL, fill=a.Name))+
xlab('Train Type')+
ylab('Ratio Noise-Total')+
#title('Comparison of Noise length ratio for pre-measurements')+
coord_flip()+#rotates the graphic
facet_grid(facets = "t.Name ~ .")+
scale_fill_manual(values=rep(c("#66a61e", "#e6ab02"),10),name="Algorithms")+
theme(legend.position="bottom")
library(RColorBrewer)
qfilt<- q %>% filter(b.Measurement=='Vormessung')
ggplot(qfilt, mapping=aes(x = c.tNoise/s.tEval), lw=0)+geom_boxplot(outlier.colour = NULL, aes(color=NULL, fill=a.Name))+
xlab('Train Type')+
ylab('Ratio Noise-Total')+
#title('Comparison of Noise length ratio for pre-measurements')+
coord_flip()+#rotates the graphic
facet_grid(facets = "t.Name ~ .")+
scale_fill_manual(values=rep(c("#66a61e", "#e6ab02"),10),name="Algorithms")+
theme(legend.position="bottom")
library(RColorBrewer)
qfilt<- q %>% filter(b.Measurement=='Vormessung')
ggplot(qfilt, mapping=aes(x = t.Name, y = c.tNoise/s.tEval), lw=0)+geom_boxplot(outlier.colour = NULL, aes(color=NULL, fill=a.Name))+
xlab('Train Type')+
ylab('Ratio Noise-Total')+
#title('Comparison of Noise length ratio for pre-measurements')+
coord_flip()+#rotates the graphic
facet_grid(facets = "a.Name ~ .")+
scale_fill_manual(values=rep(c("#66a61e", "#e6ab02"),10),name="Algorithms")+
theme(legend.position="bottom")
library(RColorBrewer)
qfilt<- q %>% filter(b.Measurement=='Vormessung')
ggplot(qfilt, mapping=aes(x = t.Name, y = c.tNoise/s.tEval), lw=0)+geom_boxplot(outlier.colour = NULL, aes(color=NULL, fill=a.Name))+
xlab('Train Type')+
ylab('Ratio Noise-Total')+
#title('Comparison of Noise length ratio for pre-measurements')+
coord_flip()+#rotates the graphic
scale_fill_manual(values=rep(c("#66a61e", "#e6ab02"),10),name="Algorithms")+
theme(legend.position="bottom")
